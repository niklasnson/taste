#include <iostream>
#include "taste.hpp"
#include "message.hpp"

int main(int argc, char* argv[]) {
  std::vector<Message> messages{
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob"),
    Message("message", "Alice", "Bob")
      };
  Taste taste{messages, 1336, 1000};
  return taste.run();
}
